@article{article,
author = {Lane, Stephen and O'Raghallaigh, Paidi and Sammon, David},
year = {2016},
month = {06},
pages = {302-312},
title = {Requirements gathering: the journey},
volume = {25},
journal = {Journal of Decision Systems},
doi = {10.1080/12460125.2016.1187390}
}

@article{ALHO20131912,
title = {Breaking down the requirements: Reliability in remote handling software},
journal = {Fusion Engineering and Design},
volume = {88},
number = {9},
pages = {1912-1915},
year = {2013},
note = {Proceedings of the 27th Symposium On Fusion Technology (SOFT-27); Liège, Belgium, September 24-28, 2012},
issn = {0920-3796},
doi = {https://doi.org/10.1016/j.fusengdes.2012.11.008},
url = {https://www.sciencedirect.com/science/article/pii/S0920379612004711},
author = {Pekka Alho and Jouni Mattila},
keywords = {remote handling, control system, software, requirements, reliability, dependability},
abstract = {Software requirements have an important role in achieving reliability for operational systems like remote handling: requirements are the basis for architectural design decisions and also the main cause of defects in high quality software. We analyze related recommendations and requirements given in software safety standards, handbooks etc. and apply them to remote handling control systems, which typically have safety-critical functionality, but are not actual safety-systems⿿for example the safety-systems in ITER will be hardware-based. Based on the analysis, we develop a set of generic recommendations for control system software requirements, including quality attributes, software fault tolerance, and safety and as an example we analyze ITER remote handling system software requirements to identify and present dependability requirements in a useful manner. Based on the analysis, we divide a high-level control system into safety-critical and non-safety-critical subsystems, and give examples of requirements that support building a dependable system.}
}

@article{10.1145/1060710.1060712,
author = {Nerur, Sridhar and Mahapatra, RadhaKanta and Mangalaraj, George},
title = {Challenges of Migrating to Agile Methodologies},
year = {2005},
issue_date = {May 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {5},
issn = {0001-0782},
url = {https://doi.org/10.1145/1060710.1060712},
doi = {10.1145/1060710.1060712},
abstract = {Software development methodologies are constantly evolving due to changing technologies and new demands from users. Today's dynamic business environment has given rise to emergent organizations that continuously adapt their structures, strategies, and policies to suit the new environment [12]. Such organizations need information systems that constantly evolve to meet their changing requirements---but the traditional, plan-driven software development methodologies lack the flexibility to dynamically adjust the development process.},
journal = {Commun. ACM},
month = {may},
pages = {72–78},
numpages = {7}
}

@article{tiwari2012selecting,
  title={Selecting requirement elicitation techniques for software projects},
  author={Tiwari, Saurabh and Rathore, Santosh Singh and Gupta, Atul},
  booktitle={2012 CSI Sixth International Conference on Software Engineering (CONSEG)},
  pages={1--10},
  year={2012},
  organization={IEEE}
}

@article{information_gathering_1,
title = {Information Gathering Methods and Tools: A Comparative Study.},
journal = {IUP Journal of Information Technology 13.14},
year = {2017},
pages = {51-62}
}

@article{silhavy2011requirements,
  title={Requirements gathering methods in system engineering},
  author={Silhavy, Radek and Silhavy, Petr and Prokopova, Zdenka},
  journal={Recent Researches in Automatic Control},
  pages={105--110},
  year={2011}
}

@article{10.1145/2884781.2884788,
author = {Eckhardt, Jonas and Vogelsang, Andreas and Fern\'{a}ndez, Daniel M\'{e}ndez},
title = {Are "Non-Functional" Requirements Really Non-Functional? An Investigation of Non-Functional Requirements in Practice},
year = {2016},
isbn = {9781450339001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2884781.2884788},
doi = {10.1145/2884781.2884788},
abstract = {Non-functional requirements (NFRs) are commonly distinguished from functional requirements by differentiating how the system shall do something in contrast to what the system shall do. This distinction is not only prevalent in research, but also influences how requirements are handled in practice. NFRs are usually documented separately from functional requirements, without quantitative measures, and with relatively vague descriptions. As a result, they remain difficult to analyze and test. Several authors argue, however, that many so-called NFRs actually describe behavioral properties and may be treated the same way as functional requirements. In this paper, we empirically investigate this point of view and aim to increase our understanding on the nature of NFRs addressing system properties. We report on the classification of 530 NFRs extracted from 11 industrial requirements specifications and analyze to which extent these NFRs describe system behavior. Our results suggest that most "non-functional" requirements are not non-functional as they describe behavior of a system. Consequently, we argue that many so-called NFRs can be handled similarly to functional requirements.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering},
pages = {832–842},
numpages = {11},
keywords = {model-based development, empirical studies, non-functional requirements, classification},
location = {Austin, Texas},
series = {ICSE '16}
}

@article{budde1992prototyping,
  title={What is prototyping?},
  author={Budde, Reinhard and Kautz, Karlheinz and Kuhlenkamp, Karin and Z{\"u}llighoven, Heinz},
  journal={Information Technology \& People},
  year={1992},
  publisher={MCB UP Ltd}
}

@article{BASTIEN2010e18,
title = {Usability testing: a review of some methodological and technical aspects of the method},
journal = {International Journal of Medical Informatics},
volume = {79},
number = {4},
pages = {e18-e23},
year = {2010},
note = {Human Factors Engineering for Healthcare Applications Special Issue},
issn = {1386-5056},
doi = {https://doi.org/10.1016/j.ijmedinf.2008.12.004},
url = {https://www.sciencedirect.com/science/article/pii/S1386505608002098},
author = {J.M. Christian Bastien},
keywords = {User centered design, User testing, Usability testing, Empirical user test, Users, Remote usability evaluation, Diary, Automatic capture, User events, Log files, User traces, Usability testing tools, Mobile applications},
abstract = {The aim of this paper is to review some work conducted in the field of user testing that aims at specifying or clarifying the test procedures and at defining and developing tools to help conduct user tests. The topics that have been selected were considered relevant for evaluating applications in the field of medical and health care informatics. These topics are: the number of participants that should take part in a user test, the test procedure, remote usability evaluation, usability testing tools, and evaluating mobile applications.}
}

@article{vsimek2015usability,
  title={Usability of UX methods in agrarian sector-verification},
  author={{\v{S}}imek, Pavel and Van{\v{e}}k, Ji{\v{r}}{\'\i} and Pavl{\'\i}k, P},
  journal={Agris on-line Papers in Economics and Informatics},
  volume={7},
  number={665-2016-45086},
  pages={49--56},
  year={2015}
}

@article{10.1145/2470654.2466442,
author = {Matejka, Justin and Grossman, Tovi and Fitzmaurice, George},
title = {Patina: Dynamic Heatmaps for Visualizing Application Usage},
year = {2013},
isbn = {9781450318990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2470654.2466442},
doi = {10.1145/2470654.2466442},
abstract = {We present Patina, an application independent system for collecting and visualizing software application usage data. Patina requires no instrumentation of the target application, all data is collected through standard window metrics and accessibility APIs. The primary visualization is a dynamic heatmap overlay which adapts to match the content, location, and shape of the user interface controls visible in the active application. We discuss a set of design guidelines for the Patina system, describe our implementation of the system, and report on an initial evaluation based on a short-term deployment of the system.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {3227–3236},
numpages = {10},
keywords = {visualization, social learning},
location = {Paris, France},
series = {CHI '13}
}

@article{rakos1990software,
  title={Software Project Management},
  author={Rakos, John J},
  year={1990},
  publisher={Prentice Hall}
}

@article{THEUNISSEN2022106733,
title = {A mapping study on documentation in Continuous Software Development},
journal = {Information and Software Technology},
volume = {142},
pages = {106733},
year = {2022},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2021.106733},
url = {https://www.sciencedirect.com/science/article/pii/S095058492100183X},
author = {Theo Theunissen and Uwe {van Heesch} and Paris Avgeriou},
keywords = {Systematic mapping studies, Systematic reviews, Continuous Software Development, Lean, Agile, DevOps, Documentation},
abstract = {Context:
With an increase in Agile, Lean, and DevOps software methodologies over the last years (collectively referred to as Continuous Software Development (CSD)), we have observed that documentation is often poor.
Objective:
This work aims at collecting studies on documentation challenges, documentation practices, and tools that can support documentation in CSD.
Method:
A systematic mapping study was conducted to identify and analyze research on documentation in CSD, covering publications between 2001 and 2019.
Results:
A total of 63 studies were selected. We found 40 studies related to documentation practices and challenges, and 23 studies related to tools used in CSD. The challenges include: informal documentation is hard to understand, documentation is considered as waste, productivity is measured by working software only, documentation is out-of-sync with the software and there is a short-term focus. The practices include: non-written and informal communication, the usage of development artifacts for documentation, and the use of architecture frameworks. We also made an inventory of numerous tools that can be used for documentation purposes in CSD. Overall, we recommend the usage of executable documentation, modern tools and technologies to retrieve information and transform it into documentation, and the practice of minimal documentation upfront combined with detailed design for knowledge transfer afterwards.
Conclusion:
It is of paramount importance to increase the quantity and quality of documentation in CSD. While this remains challenging, practitioners will benefit from applying the identified practices and tools in order to mitigate the stated challenges.}
}

@article{fewster1999software,
  title={Software test automation},
  author={Fewster, Mark and Graham, Dorothy},
  year={1999},
  publisher={Addison-Wesley Reading}
}

@article{10.1145/71605.71612,
author = {Pokkunuri, B. P.},
title = {Object Oriented Programming},
year = {1989},
issue_date = {Nov. 1989},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {11},
issn = {0362-1340},
url = {https://doi.org/10.1145/71605.71612},
doi = {10.1145/71605.71612},
abstract = {Object Oriented Programming (OOP) is being used quite widely in the fields of both software engineering and artificial intelligence. The aim of this article is to give an idea of OOP and its features. It includes an indication of the available OOP environments and the Object-Oriented extensions made to the conventional languages such as C and Pascal. Some of the advantages in the use of OOP are also described briefly.},
journal = {SIGPLAN Not.},
month = {nov},
pages = {96–101},
numpages = {6}
}

@article{https://doi.org/10.1111/2041-210X.13961,
author = {Filazzola, Alessandro and Lortie, CJ},
title = {A call for clean code to effectively communicate science},
journal = {Methods in Ecology and Evolution},
volume = {n/a},
number = {n/a},
pages = {},
keywords = {open science, principles, programming, replication, reproducibility, science communication, transparency},
doi = {https://doi.org/10.1111/2041-210X.13961},
url = {https://besjournals.onlinelibrary.wiley.com/doi/abs/10.1111/2041-210X.13961},
eprint = {https://besjournals.onlinelibrary.wiley.com/doi/pdf/10.1111/2041-210X.13961},
abstract = {Abstract Effective coding is fundamental to the study of biology. Computation underpins most research, and reproducible science can be promoted through clean coding practices. Clean coding is crafting code design, syntax and nomenclature in a manner that maximizes the potential to communicate its intent with other scientists. However, computational biologists are not software engineers, and many of our coding practices have developed ad hoc without formal training, often creating difficult-to-read code for others. Hard-to-understand code can thus be limiting our efficiency and ability to communicate as scientists with one another. The purpose of this paper is to provide a primer on some of the practices associated with crafting clean code by synthesizing a transformative text in software engineering along with recent articles on coding practices in computational biology. We review past recommendations to provide a series of best practices that transform coding into a human-accessible form of communication. Three common themes shared in this synthesis are the following: (a) code has value and you are responsible for its organization to enable clear communication, (b) use a formatting style to guide writing code that is easily understandable and consistent and (c) apply abstraction to emphasize important elements and declutter. While many of the provided practices and recommendations were developed with computational biologists in mind, we believe there is wider applicability to any biologist undertaking work in data management or statistical analyses. Clean code is thus a crucial step forward in resolving some of the crisis in reproducibility for science.}
}

@article{sarcar2021use,
  title={Use the DRY Principle},
  author={Sarcar, Vaskaran},
  booktitle={Simple and Efficient Programming with C\#},
  pages={109--128},
  year={2021},
  publisher={Springer}
}

@article{denker2015versionsverwaltung,
  title={Versionsverwaltung mit Git},
  author={Denker, Merlin and Srecec, Stefan and liegt das im Literaturverzeichnis, Dieser Ausarbeitung and Git, Pro and Chacon, Scott and Straub, Ben},
  year={2015}
}

@article{fowler2006continuous,
  title={Continuous integration},
  author={Fowler, Martin and Foemmel, Matthew},
  year={2006}
}

@article{10.1145/1283920.1283937,
author = {Codd, E. F.},
title = {Relational Database: A Practical Foundation for Productivity},
year = {2007},
isbn = {9781450310499},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1283920.1283937},
abstract = {It is well known that the growth in demands from end users for new applications is outstripping the capability of data processing departments to implement the corresponding application programs. There are two complementary approaches to attacking this problem (and both approaches are needed): one is to put end users into direct touch with the information stored in computers; the other is to increase the productivity of data processing professionals in the development of application programs. It is less well known that a single technology, relational database management, provides a practical foundation for both approaches. It is explained why this is so.While developing this productivity theme, it is noted that the time has come to draw a very sharp line between relational and nonrelational database systems, so that the label "relational" will not be used in misleading ways. The key to drawing this line is something called a "relational processing capability."},
booktitle = {ACM Turing Award Lectures},
pages = {1981}
}

@article{doi:10.1080/12460125.2016.1187390,
author = {Stephen Lane and Paidi O’Raghallaigh and David Sammon},
title = {Requirements gathering: the journey},
journal = {Journal of Decision Systems},
volume = {25},
number = {sup1},
pages = {302-312},
year  = {2016},
publisher = {Taylor & Francis},
doi = {10.1080/12460125.2016.1187390},
URL = { 
        https://doi.org/10.1080/12460125.2016.1187390 
},
eprint = { 
        https://doi.org/10.1080/12460125.2016.1187390 
}
}

@article{34908,
title	= {Learning to be a software engineer in a complex organization: A case study focusing on apprenticeship/practice based learning for getting new engineers productive in contributing to the Google codebase},
author	= {Maggie Johnson and Max Senges},
year	= {2010},
URL	= {http://dx.doi.org/10.1108/13665621011028620},
journal	= {Journal of Workplace Learning},
pages	= {180-194},
volume	= {22, no. 3}
}

@article{mock2003dynamic,
  title={Dynamic analysis from the bottom up},
  author={Mock, Markus},
  booktitle={WODA 2003 ICSE Workshop on Dynamic Analysis},
  pages={13},
  year={2003},
  organization={Citeseer}
}

@article{blackwell2002programming,
  title={What is programming?},
  author={Blackwell, Alan F},
  booktitle={PPIG},
  pages={20},
  year={2002},
  organization={Citeseer}
}

@article{chung2000non,
  title={Non-functional requirements},
  author={Chung, Lawrence and Nixon, Brian and Yu, Eric and Mylopoulos, John},
  journal={Software Engineering},
  year={2000},
  publisher={Kluwer Academic}
}

@article{hutton2009clean,
  title={Clean code: a handbook of agile software craftsmanship},
  author={Hutton, DM},
  journal={Kybernetes},
  year={2009},
  publisher={Emerald Group Publishing Limited}
}


@article{schaffner2013programming,
  title={Programming for Experimental Economics: Introducing CORAL-a lightweight framework for experimental economic experiments},
  author={Schaffner, Markus and others},
  journal={QUT Business School: Tech. rep},
  year={2013}
}
<div class="open_grepper_editor" title="Edit & Save To Grepper"></div>